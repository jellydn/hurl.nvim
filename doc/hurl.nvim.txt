*hurl.nvim.txt*           For NVIM v0.8.0           Last change: 2024 March 09

==============================================================================
Table of Contents                                *hurl.nvim-table-of-contents*

  - Features                                              |hurl.nvim-features|
  - Usage                                                    |hurl.nvim-usage|
  - Env File Support: vars.env          |hurl.nvim-env-file-support:-vars.env|
  - Demo                                                      |hurl.nvim-demo|
  - Default Key Mappings                      |hurl.nvim-default-key-mappings|
  - Configuration                                    |hurl.nvim-configuration|
  - Resources                                            |hurl.nvim-resources|
  - Credits                                                |hurl.nvim-credits|
  - Author                                                  |hurl.nvim-author|
  - Show your support                            |hurl.nvim-show-your-support|
  - Contributors ‚ú®                              |hurl.nvim-contributors-‚ú®|
Welcome to hurl.nvim üëãHurl.nvim is a Neovim plugin designed to run HTTP requests directly from `.hurl` files. Elevate your API development workflow by executing and viewing responses without leaving your editor.|hurl.nvim-|

<https://www.youtube.com/watch?v=nr_RbHvnnwk>


FEATURES                                                  *hurl.nvim-features*

- üöÄ Execute HTTP requests directly from `.hurl` files.
- üëÅ‚Äçüó® Multiple display modes for API response: popup or split.
- üåà Highly customizable through settings.


USAGE                                                        *hurl.nvim-usage*

Add the following configuration to your Neovim setup with lazy.nvim
<https://github.com/folke/lazy.nvim>:

>lua
    {
      "jellydn/hurl.nvim",
      dependencies = {
          "MunifTanjim/nui.nvim",
          "nvim-treesitter/nvim-treesitter"
      },
      ft = "hurl",
      opts = {
        -- Show debugging info
        debug = false,
        -- Show notification on run
        show_notification = false,
        -- Show response in popup or split
        mode = "split",
        -- Default formatter
        formatters = {
          json = { 'jq' }, -- Make sure you have install jq in your system, e.g: brew install jq
          html = {
            'prettier', -- Make sure you have install prettier in your system, e.g: npm install -g prettier
            '--parser',
            'html',
          },
        },
      },
      keys = {
        -- Run API request
        { "<leader>A", "<cmd>HurlRunner<CR>", desc = "Run All requests" },
        { "<leader>a", "<cmd>HurlRunnerAt<CR>", desc = "Run Api request" },
        { "<leader>te", "<cmd>HurlRunnerToEntry<CR>", desc = "Run Api request to entry" },
        { "<leader>tm", "<cmd>HurlToggleMode<CR>", desc = "Hurl Toggle Mode" },
        { "<leader>tv", "<cmd>HurlVerbose<CR>", desc = "Run Api in verbose mode" },
        -- Run Hurl request in visual mode
        { "<leader>h", ":HurlRunner<CR>", desc = "Hurl Runner", mode = "v" },
      },
    }
<

When configuring nvim-treesitter add `hurl` to the `ensure_installed` list of
parsers.

Simple demo in split mode:

<https://gyazo.com/19492e8b5366cec3f22d5fd97a63f37a>


  [!NOTE] I frequently utilize the nightly version of Neovim, so if you encounter
  any issues, I recommend trying that version first. I may not have the time to
  address problems in the stable version. Your contributions via pull requests
  are always welcome.

ENV FILE SUPPORT: VARS.ENV              *hurl.nvim-env-file-support:-vars.env*

`hurl.nvim` seamlessly integrates with environment files named `vars.env` to
manage environment variables for your HTTP requests. These environment
variables are essential for customizing your requests with dynamic data such as
API keys, base URLs, and other configuration values.


CUSTOMIZATION ~

You can specify the name of the environment file in your `hurl.nvim`
configuration. By default, `hurl.nvim` looks for a file named `vars.env`, but
you can customize this to any file name that fits your project‚Äôs structure.

Here‚Äôs how to set a custom environment file name in your `hurl.nvim` setup:

>lua
    require('hurl').setup({
      -- Specify your custom environment file name here
      env_file = {
          'hurl.env',
      },
      -- Other configuration options...
    })
<


FILE LOCATION ~

The plugin searches for a `vars.env` (env_file config) in multiple locations to
accommodate various project structures and ensure that environment-specific
variables for your HTTP requests are easily accessible. The search occurs in
the following order:

1. **Current File‚Äôs Directory:** The directory where the current file is
located. This is particularly useful for projects where environment variables
are specific to a particular module or component.


2. **Specific Directories in Project:** The plugin scans predefined directories
within the project, which are commonly used for organizing different aspects of
a project:

- `src/`: The source code directory.
- `test/` and `tests/`: Directories typically used for test scripts.
- `server/`: If your project includes a server component, this directory is checked.
- `src/tests/` and `server/tests/`: These are checked for environment variables specific to tests within the respective `src` and `server` directories.


3. **Intermediate Directories from Git Root to Current File:** If the project is a
git repository, the plugin identifies the root of the repository and then
searches for `vars.env` in every directory on the path from this root to the
current file‚Äôs directory. This feature is particularly useful in monorepo
setups or large projects, where different modules or packages may have their
own environment variables.



By checking these locations, the plugin ensures a comprehensive search for
environment variables, catering to a wide range of project structures and
setups.


SWAPPABLE ENVIRONMENT ~

To change the environment file name, use the `HurlSetEnvFile` command followed
by the new file name. You can have multiple variable files by having
comma-seperated values.


NOTES

- Ensure that the new environment file exists in the directories where the plugin searches for it, as outlined in the |hurl.nvim-file-location| section.
- This change will apply globally for the current session of Neovim. If you restart Neovim, it will revert to the default `vars.env` unless you change it again.


DEMO                                                          *hurl.nvim-demo*

Check out the following demos to see `hurl.nvim` in action:


RUN A FILE ~

Run the entire file by pressing `<leader>A` or run `HurlRunner` command.

<https://gyazo.com/e554e81788aad910848ff991c9369d7b>


RUN A SELECTION ~

Select a range of lines and press `<leader>h` to execute the request or run
`HurlRunner` command.

<https://gyazo.com/1a44dbbf165006fb5744c8f10883bb69>


RUN AT CURRENT LINE ~

Place your cursor on a HURL entry and press `<leader>a` or run `HurlRunnerAt`
command to execute the entry request.

<https://gyazo.com/20efd2cf3f73238bd57e79fc662208b1>


VERBOSE MODE

Run `HurlVerbose` command to execute the request in verbose mode. The response
will be displayed in QuickFix window. This is useful for debugging purposes or
getting the curl command from hurl file.

<https://gyazo.com/7d0f709e2db53f8c9e05655347f11bc9>


RUN TO ENTRY ~

Place your cursor on the line you want to run to that entry and press
`<leader>te` or run `HurlRunnerToEntry` command to execute the request.

<https://gyazo.com/14d47adbfcab9e945f89e020b83328a9>

Note: it‚Äôs running from start of file to the selected entry and ignore the
remaining of the file. It is useful for debugging purposes.


TOGGLE MODE ~

Run `HurlToggleMode` command to toggle between split and popup mode.

<https://gyazo.com/b36b19ab76524b95015eafe4c6e1c81f>


DEFAULT KEY MAPPINGS                          *hurl.nvim-default-key-mappings*

`hurl.nvim` comes with some default key mappings to streamline your workflow:

- `q`: Close the current popup window.
- `<C-n>`: Switch to the next popup window.
- `<C-p>`: Switch to the previous popup window.

These key mappings are active within the popup windows that `hurl.nvim`
displays.


CONFIGURATION                                        *hurl.nvim-configuration*

`hurl.nvim` can be customized with the following default configurations:

>lua
    local default_config = {
      -- Toggle debugging information
      debug = false, -- If true, logs will be saved at ~/.local/state/nvim/hurl.nvim.log
    
      -- Set the display mode for the response: 'split' or 'popup'
      mode = 'split',
    
      -- Split settings
      split_position = "right",
      split_size = "50%",
    
      -- Popup settings
      popup_position = '50%',
      popup_size = {
        width = 80,
        height = 40,
      },
    
      -- Default environment file name
      env_file = {
          'vars.env',
      },
    
      -- Specify formatters for different response types
      formatters = {
        json = { 'jq' },  -- Uses jq to format JSON responses
        html = {
          'prettier',     -- Uses prettier to format HTML responses
          '--parser',
          'html',
        },
      },
    }
<

To apply these configurations, include them in your Neovim setup like this:

>lua
    require('hurl').setup({
      debug = true,          -- Enable to show detailed logs
      mode = 'popup',        -- Change to 'popup' to display responses in a popup window
      env_file = { 'vars.env' }, -- Change this to use a different environment file name
      formatters = {
        json = { 'jq' },    -- Customize the JSON formatter command
        html = {
          'prettier',       -- Customize the HTML formatter command
          '--parser',
          'html',
        },
      },
    })
<

Adjust the settings as per your needs to enhance your development experience
with `hurl.nvim`.


TIPS ~


  [!TIP] Enable debug mode with `debug = true` for detailed logs
- Logs are saved at `~/.local/state/nvim/hurl.nvim.log` on macOS.


  [!TIP] Split mode with Edgy
- `hurl.nvim` can be used with edgy.nvim <https://github.com/folke/edgy.nvim> to manage layout when using the split mode.

>lua
    right = {
      { title = "Hurl Nvim", size = { width = 0.5 }, ft = "hurl-nvim" },
    }
<


  [!TIP] Syntax Highlighting in Stable Neovim
- If you‚Äôre using a stable version of Neovim that doesn‚Äôt support Hurl syntax highlighting, you can set the filetype to `sh` or `bash` for your `.hurl` files. This will enable basic syntax highlighting that can improve readability. To do this, add the following line to your Neovim configuration:

>vim
    autocmd BufRead,BufNewFile *.hurl setfiletype sh
<

For example, here is my autocmd
<https://github.com/jellydn/lazy-nvim-ide/commit/141edf7114839ba7656c4484f852199179c4f11f>
for `.hurl` files.


RESOURCES                                                *hurl.nvim-resources*

<https://www.youtube.com/watch?v=LP_RXe8cM_s>


CREDITS                                                    *hurl.nvim-credits*

- Hurl - Run and Test HTTP Requests <https://hurl.dev/>
- Inspired by ray-x/web-tools.nvim: Neovim plugin for web developers <https://github.com/ray-x/web-tools.nvim>
- Utilize MunifTanjim/nui.nvim: UI components for Neovim plugins and configurations <https://github.com/MunifTanjim/nui.nvim>


AUTHOR                                                      *hurl.nvim-author*

üë§ **Huynh Duc Dung**

- Website: https://productsway.com/
- Twitter: @jellydn <https://twitter.com/jellydn>
- Github: @jellydn <https://github.com/jellydn>


SHOW YOUR SUPPORT                                *hurl.nvim-show-your-support*

If this guide has been helpful, please give it a ‚≠êÔ∏è.

<https://ko-fi.com/dunghd> <https://paypal.me/dunghd>
<https://www.buymeacoffee.com/dunghd>


CONTRIBUTORS ‚ú®                                  *hurl.nvim-contributors-‚ú®*

Thanks goes to these wonderful people (emoji key
<https://allcontributors.org/docs/en/emoji-key>):

Dung Duc Huynh (Kaka)üíª üìñCenk Kƒ±lƒ±√ßüíª üìñAndre Van Der MerweüíªSergey Kochetkovüìñ üíªrbinghamüíªHoracio Sansonüíª üìñ
Add your contributions
This project follows the all-contributors
<https://github.com/all-contributors/all-contributors> specification.
Contributions of any kind welcome!

==============================================================================
1. Links                                                     *hurl.nvim-links*

1. *All Contributors*: https://img.shields.io/badge/all_contributors-6-orange.svg?style=flat-square
2. *IT Man - Effortless APIs with Hurl.nvim: A Developer‚Äôs Guide to Neovim Tooling [Vietnamese]*: https://i.ytimg.com/vi/nr_RbHvnnwk/hqdefault.jpg
3. *Show in split mode*: https://i.gyazo.com/19492e8b5366cec3f22d5fd97a63f37a.gif
4. *Run a file in popup mode*: https://i.gyazo.com/e554e81788aad910848ff991c9369d7b.gif
5. *Run a selection in popup mode*: https://i.gyazo.com/1a44dbbf165006fb5744c8f10883bb69.gif
6. *Run at current line in popup mode*: https://i.gyazo.com/20efd2cf3f73238bd57e79fc662208b1.gif
7. *Run at current line in verbose mode*: https://i.gyazo.com/7d0f709e2db53f8c9e05655347f11bc9.gif
8. *Run to entry in split mode*: https://i.gyazo.com/14d47adbfcab9e945f89e020b83328a9.gif
9. *Toggle mode*: https://i.gyazo.com/b36b19ab76524b95015eafe4c6e1c81f.gif
10. *IT Man - Building and Testing a #Hapi Server with #Hurl: A Step-By-Step Demo [Vietnamese]*: https://i.ytimg.com/vi/LP_RXe8cM_s/mqdefault.jpg
11. *@jellydn*: 
12. *@jellydn*: 
13. *kofi*: https://img.shields.io/badge/Ko--fi-F16061?style=for-the-badge&logo=ko-fi&logoColor=white
14. *paypal*: https://img.shields.io/badge/PayPal-00457C?style=for-the-badge&logo=paypal&logoColor=white
15. *buymeacoffee*: https://img.shields.io/badge/Buy_Me_A_Coffee-FFDD00?style=for-the-badge&logo=buy-me-a-coffee&logoColor=black

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
